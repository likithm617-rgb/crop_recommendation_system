from flask import Flask, request, render_template, Response
from PIL import Image
import pytesseract, os, sqlite3

from database import extract_values, extract_all_numbers, save_to_db
from recommendation import recommend_crops
from market_price import get_crop_price

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Language translations
translations = {
    'en': {
        'title': 'Upload Soil Report',
        'farmer': 'Farmer Name',
        'location': 'Location',
        'crop': 'Intended Crops',
        'month': 'Month of Sowing',
        'upload': 'Upload Soil Report Image',
        'submit': 'Submit',
        'extracted': 'Extracted Text',
        'parsed': 'Parsed Values',
        'recommended': 'Recommended Crops with Market Prices',
        'warnings': 'Warnings',
        'saved': 'View Saved Reports',
        'nitrogen': 'Nitrogen',
        'phosphorus': 'Phosphorus',
        'potash': 'Potash',
        'ph': 'pH',
        'moisture': 'Moisture',
        'months': ['January', 'February', 'March', 'April', 'May', 'June',
                   'July', 'August', 'September', 'October', 'November', 'December'],
        'revenue': 'Total Revenue',
        'cost': 'Total Cost',
        'profit': 'Net Profit',
        'break_even': 'Break-even Price',
        'print': 'Print this page'
    }
'kn': {
    'title': '‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤µ‡≤∞‡≤¶‡≤ø‡≤Ø‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤™‡≥ç‚Äå‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø',
    'farmer': '‡≤∞‡≥à‡≤§‡≤® ‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å',
    'location': '‡≤∏‡≥ç‡≤•‡≤≥',
    'crop': '‡≤â‡≤¶‡≥ç‡≤¶‡≥á‡≤∂‡≤ø‡≤§ ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤ó‡≤≥‡≥Å',
    'month': '‡≤¨‡≤ø‡≤§‡≥ç‡≤§‡≤®‡≥Ü ‡≤§‡≤ø‡≤Ç‡≤ó‡≤≥‡≥Å',
    'upload': '‡≤Æ‡≤£‡≥ç‡≤£‡≤ø‡≤® ‡≤µ‡≤∞‡≤¶‡≤ø ‡≤ö‡≤ø‡≤§‡≥ç‡≤∞‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Ö‡≤™‡≥ç‚Äå‡≤≤‡≥ã‡≤°‡≥ç ‡≤Æ‡≤æ‡≤°‡≤ø',
    'submit': '‡≤∏‡≤≤‡≥ç‡≤≤‡≤ø‡≤∏‡≥Å',
    'extracted': '‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü',
    'parsed': '‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤ø‡≤§ ‡≤Æ‡≥å‡≤≤‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å',
    'recommended': '‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø‡≤¶ ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≤æ‡≤∞‡≥Å‡≤ï‡≤ü‡≥ç‡≤ü‡≥Ü ‡≤¨‡≥Ü‡≤≤‡≥Ü‡≤ó‡≤≥‡≥Å',
    'warnings': '‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü‡≤ó‡≤≥‡≥Å',
    'saved': '‡≤â‡≤≥‡≤ø‡≤∏‡≤ø‡≤¶ ‡≤µ‡≤∞‡≤¶‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø',
    'nitrogen': '‡≤®‡≥à‡≤ü‡≥ç‡≤∞‡≥ã‡≤ú‡≤®‡≥ç',
    'phosphorus': '‡≤´‡≤æ‡≤∏‡≥ç‡≤´‡≤∞‡≤∏‡≥ç',
    'potash': '‡≤™‡≥ä‡≤ü‡≤æ‡≤∂‡≥ç',
    'ph': '‡≤™‡≤ø‡≤π‡≥Ü‡≤ö‡≥ç',
    'moisture': '‡≤Ü‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü',
    'months': ['‡≤ú‡≤®‡≤µ‡≤∞‡≤ø', '‡≤´‡≥Ü‡≤¨‡≥ç‡≤∞‡≤µ‡≤∞‡≤ø', '‡≤Æ‡≤æ‡≤∞‡≥ç‡≤ö‡≥ç', '‡≤è‡≤™‡≥ç‡≤∞‡≤ø‡≤≤‡≥ç', '‡≤Æ‡≥á', '‡≤ú‡≥Ç‡≤®‡≥ç',
               '‡≤ú‡≥Å‡≤≤‡≥à', '‡≤Ü‡≤ó‡≤∏‡≥ç‡≤ü‡≥ç', '‡≤∏‡≥Ü‡≤™‡≥ç‡≤ü‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç', '‡≤Ö‡≤ï‡≥ç‡≤ü‡≥ã‡≤¨‡≤∞‡≥ç', '‡≤®‡≤µ‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç', '‡≤°‡≤ø‡≤∏‡≥Ü‡≤Ç‡≤¨‡≤∞‡≥ç'],
    'revenue': '‡≤í‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Ü‡≤¶‡≤æ‡≤Ø',
    'cost': '‡≤í‡≤ü‡≥ç‡≤ü‡≥Å ‡≤µ‡≥Ü‡≤ö‡≥ç‡≤ö',
    'profit': '‡≤®‡≤ø‡≤ï‡≤æ‡≤∏‡≤ø ‡≤≤‡≤æ‡≤≠',
    'break_even': '‡≤¨‡≥ç‡≤∞‡≥á‡≤ï‡≥ç-‡≤à‡≤µ‡≥Ü‡≤®‡≥ç ‡≤¨‡≥Ü‡≤≤‡≥Ü',
    'print': '‡≤à ‡≤™‡≥Å‡≤ü‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤Æ‡≥Å‡≤¶‡≥ç‡≤∞‡≤ø‡≤∏‡≤ø'
}
'hi': {
    'title': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç',
    'farmer': '‡§ï‡§ø‡§∏‡§æ‡§® ‡§ï‡§æ ‡§®‡§æ‡§Æ',
    'location': '‡§∏‡•ç‡§•‡§æ‡§®',
    'crop': '‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞',
    'month': '‡§¨‡•ã‡§®‡•á ‡§ï‡§æ ‡§Æ‡§π‡•Ä‡§®‡§æ',
    'upload': '‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§õ‡§µ‡§ø ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç',
    'submit': '‡§ú‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç',
    'extracted': '‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ ‡§™‡§æ‡§†',
    'parsed': '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ø‡§§ ‡§Æ‡§æ‡§®',
    'recommended': '‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§æ‡§ú‡§º‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø',
    'warnings': '‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä',
    'saved': '‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç',
    'nitrogen': '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§®',
    'phosphorus': '‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏',
    'potash': '‡§™‡•ã‡§ü‡§æ‡§∂',
    'ph': '‡§™‡•Ä‡§è‡§ö',
    'moisture': '‡§®‡§Æ‡•Ä',
    'months': ['‡§ú‡§®‡§µ‡§∞‡•Ä', '‡§´‡§º‡§∞‡§µ‡§∞‡•Ä', '‡§Æ‡§æ‡§∞‡•ç‡§ö', '‡§Ö‡§™‡•ç‡§∞‡•à‡§≤', '‡§Æ‡§à', '‡§ú‡•Ç‡§®',
               '‡§ú‡•Å‡§≤‡§æ‡§à', '‡§Ö‡§ó‡§∏‡•ç‡§§', '‡§∏‡§ø‡§§‡§Ç‡§¨‡§∞', '‡§Ö‡§ï‡•ç‡§ü‡•Ç‡§¨‡§∞', '‡§®‡§µ‡§Ç‡§¨‡§∞', '‡§¶‡§ø‡§∏‡§Ç‡§¨‡§∞'],
    'revenue': '‡§ï‡•Å‡§≤ ‡§∞‡§æ‡§ú‡§∏‡•ç‡§µ',
    'cost': '‡§ï‡•Å‡§≤ ‡§≤‡§æ‡§ó‡§§',
    'profit': '‡§∂‡•Å‡§¶‡•ç‡§ß ‡§≤‡§æ‡§≠',
    'break_even': '‡§¨‡•ç‡§∞‡•á‡§ï-‡§à‡§µ‡§® ‡§Æ‡•Ç‡§≤‡•ç‡§Ø',
    'print': '‡§á‡§∏ ‡§™‡•É‡§∑‡•ç‡§† ‡§ï‡•ã ‡§™‡•ç‡§∞‡§ø‡§Ç‡§ü ‡§ï‡§∞‡•á‡§Ç'
}
'te': {
    'title': '‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï‡∞®‡±Å ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
    'farmer': '‡∞∞‡±à‡∞§‡±Å ‡∞™‡±á‡∞∞‡±Å',
    'location': '‡∞™‡±ç‡∞∞‡∞æ‡∞Ç‡∞§‡∞Ç',
    'crop': '‡∞™‡∞Ç‡∞ü ‡∞∞‡∞ï‡∞Ç',
    'month': '‡∞µ‡∞ø‡∞§‡±ç‡∞§‡±á ‡∞®‡±Ü‡∞≤',
    'upload': '‡∞Æ‡∞ü‡±ç‡∞ü‡∞ø ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï ‡∞ö‡∞ø‡∞§‡±ç‡∞∞‡∞Ç ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
    'submit': '‡∞∏‡∞Æ‡∞∞‡±ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø',
    'extracted': '‡∞â‡∞¶‡±ç‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞® ‡∞µ‡∞ö‡∞®‡∞Ç',
    'parsed': '‡∞µ‡∞ø‡∞∂‡±ç‡∞≤‡±á‡∞∑‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞µ‡∞ø‡∞≤‡±Å‡∞µ‡∞≤‡±Å',
    'recommended': '‡∞∏‡∞ø‡∞´‡∞æ‡∞∞‡±ç‡∞∏‡±Å ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞™‡∞Ç‡∞ü‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ï‡±Ü‡∞ü‡±ç ‡∞ß‡∞∞‡∞≤‡±Å',
    'warnings': '‡∞π‡±Ü‡∞ö‡±ç‡∞ö‡∞∞‡∞ø‡∞ï‡∞≤‡±Å',
    'saved': '‡∞∏‡±á‡∞µ‡±ç ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞®‡∞ø‡∞µ‡±á‡∞¶‡∞ø‡∞ï‡∞≤‡∞®‡±Å ‡∞ö‡±Ç‡∞°‡∞Ç‡∞°‡∞ø',
    'nitrogen': '‡∞®‡±à‡∞ü‡±ç‡∞∞‡±ã‡∞ú‡∞®‡±ç',
    'phosphorus': '‡∞´‡∞æ‡∞∏‡±ç‡∞´‡∞∞‡∞∏‡±ç',
    'potash': '‡∞™‡±ä‡∞ü‡∞æ‡∞∑‡±ç',
    'ph': '‡∞™‡∞ø‡∞π‡±Ü‡∞ö‡±ç',
    'moisture': '‡∞§‡±á‡∞Æ',
    'months': ['‡∞ú‡∞®‡∞µ‡∞∞‡∞ø', '‡∞´‡∞ø‡∞¨‡±ç‡∞∞‡∞µ‡∞∞‡∞ø', '‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø', '‡∞è‡∞™‡±ç‡∞∞‡∞ø‡∞≤‡±ç', '‡∞Æ‡±á', '‡∞ú‡±Ç‡∞®‡±ç',
               '‡∞ú‡±Ç‡∞≤‡±à', '‡∞Ü‡∞ó‡∞∏‡±ç‡∞ü‡±Å', '‡∞∏‡±Ü‡∞™‡±ç‡∞ü‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç', '‡∞Ö‡∞ï‡±ç‡∞ü‡±ã‡∞¨‡∞∞‡±ç', '‡∞®‡∞µ‡∞Ç‡∞¨‡∞∞‡±ç', '‡∞°‡∞ø‡∞∏‡±Ü‡∞Ç‡∞¨‡∞∞‡±ç'],
    'revenue': '‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞Ü‡∞¶‡∞æ‡∞Ø‡∞Ç',
    'cost': '‡∞Æ‡±ä‡∞§‡±ç‡∞§‡∞Ç ‡∞ñ‡∞∞‡±ç‡∞ö‡±Å',
    'profit': '‡∞®‡∞ø‡∞ï‡∞∞ ‡∞≤‡∞æ‡∞≠‡∞Ç',
    'break_even': '‡∞¨‡±ç‡∞∞‡±á‡∞ï‡±ç-‡∞à‡∞µ‡±Ü‡∞®‡±ç ‡∞ß‡∞∞',
    'print': '‡∞à ‡∞™‡±á‡∞ú‡±Ä‡∞®‡∞ø ‡∞Æ‡±Å‡∞¶‡±ç‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø'
}
}

crop_translations = {
    'Cotton': {'en': 'Cotton'},
    'Finger Millet': {'en': 'Finger Millet'}
}

@app.route('/')
def index():
    language = request.args.get('language', 'en')
    t = translations.get(language, translations['en'])
    return render_template('upload.html', t=t, language=language)

@app.route('/upload', methods=['POST'])
def upload_file():
    file = request.files['soilReport']
    farmer_name = request.form['farmerName']
    location = request.form['location']
    crop_type = request.form['cropType']
    sowing_month = int(request.form['sowingMonth'])
    language = request.form.get('language', 'en')
    t = translations.get(language, translations['en'])

    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(filepath)

    text = pytesseract.image_to_string(Image.open(filepath), config='--psm 11')

    try:
        nitrogen, phosphorus, potash, ph_value, moisture = extract_values(text)
    except Exception:
        numbers = extract_all_numbers(text)
        return f"""
        <h2>{t['extracted']}:</h2><pre>{text}</pre>
        <h2>Detected Numbers:</h2>
        <p>{numbers}</p>
        <p>‚ö†Ô∏è Unable to auto-map values. Please verify manually.</p>
        <p><a href='/'>üîô {t['upload']}</a></p>
        """

    save_to_db(farmer_name, location, crop_type, nitrogen, phosphorus, potash, ph_value, moisture)

    recommended_crops, warnings = recommend_crops(
        nitrogen, phosphorus, potash, ph_value, moisture, crop_type, sowing_month
    )

    translated_crops = [
        {
            "name": crop_translations[crop][language],
            "price": get_crop_price(crop),
            "original": crop
        }
        for crop in recommended_crops
    ]

    return render_template('results.html',
                           t=t,
                           crop=crop_type,
                           nitrogen=nitrogen,
                           phosphorus=phosphorus,
                           potash=potash,
                           ph_value=ph_value,
                           moisture=moisture,
                           translated_crops=translated_crops,
                           warnings=warnings,
                           language=language)

@app.route('/calculator')
def calculator():
    crop = request.args.get('crop', '')
    price = request.args.get('price', '')
    language = request.args.get('language', 'en')
    t = translations.get(language, translations['en'])
    return render_template('calculator.html', crop=crop, price=price, t=t, language=language)

@app.route('/calculate', methods=['POST'])
def calculate():
    crop = request.form['crop']
    yield_per_hectare = float(request.form['yield'])
    market_price = float(request.form['price'])
    seed_cost = float(request.form['seed'])
    fertilizer_cost = float(request.form['fertilizer'])
    labor_cost = float(request.form['labor'])
    irrigation_cost = float(request.form['irrigation'])
    equipment_cost = float(request.form['equipment'])
    language = request.form.get('language', 'en')

    total_cost = seed_cost + fertilizer_cost + labor_cost + irrigation_cost + equipment_cost
    total_revenue = yield_per_hectare * market_price
    net_profit = total_revenue - total_cost
    break_even_price = total_cost / yield_per_hectare if yield_per_hectare else 0

    t = translations.get(language, translations['en'])

    return render_template('result.html',
                           crop=crop,
                           revenue=round(total_revenue, 2),
                           cost=round(total_cost, 2),
                           profit=round(net_profit, 2),
                           break_even=round(break_even_price, 2),
                           t=t)

@app.route('/reports')
def view_reports():
    conn = sqlite3.connect('soil_reports.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM soil_reports ORDER BY id DESC')
    rows = cursor.fetchall()
    conn.close()

    html = "<h1>Saved Reports</h1><table border='1'><tr><th>ID</th><th>Farmer</th><th>Location</th><th>Crop</th><th>N</th><th>P</th><th>K</th><th>pH</th><th>Moisture</th><th>Interpretation</th></tr>"
    for row in rows:
        html += f"<tr>{''.join(f'<td>{cell}</td>' for cell in row)}</tr>"
    html += "</table><p><a href='/'>Upload another report</a></p><p><a href='/export_csv'>üì§ Export as CSV</a></p>"
    return html

@app.route('/export_csv')
def export_csv():
    conn = sqlite3.connect('soil_reports.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM soil_reports')
    rows = cursor.fetchall()
    conn.close()

    def generate():
        yield 'ID,Farmer,Location,Crop,N,P,K,pH,Moisture,Interpretation\n'
        for row in rows:
            yield ','.join(str(cell) for cell in row) + '\n'

    return Response(generate(), mimetype='text/csv',
                    headers={"Content-Disposition": "attachment;filename=soil_reports.csv"})

if __name__ == '__main__':
    app.run(debug=True)