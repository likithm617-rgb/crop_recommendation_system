 from flask import Flask, request, render_template, Response
from PIL import Image
import pytesseract, os, sqlite3
from database import extract_values, extract_all_numbers, save_to_db
from recommendation import recommend_crops
from market_price import get_crop_price

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
pytesseract.pytesseract.tesseract_cmd = r'C:\Program Files\Tesseract-OCR\tesseract.exe'

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

@app.route('/')
def index():
    return render_template('upload.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    file = request.files['soilReport']
    farmer_name = request.form['farmerName']
    location = request.form['location']
    crop_type = request.form['cropType']
    sowing_month = int(request.form['sowingMonth'])
    language = request.form.get('language', 'en')

    filepath = os.path.join(app.config['UPLOAD_FOLDER'], file.filename)
    file.save(filepath)

    text = pytesseract.image_to_string(Image.open(filepath), config='--psm 11')

    translations = {
        'en': {
            'extracted': 'Extracted Text',
            'parsed': 'Parsed Values',
            'recommended': 'Recommended Crops with Market Prices',
            'warnings': 'Warnings',
            'saved': 'View Saved Reports',
            'nitrogen': 'Nitrogen',
            'phosphorus': 'Phosphorus',
            'potash': 'Potash',
            'ph': 'pH',
            'moisture': 'Moisture'
        },
        'kn': {
            'extracted': '‡≤™‡≤†‡≥ç‡≤Ø‡≤µ‡≤®‡≥ç‡≤®‡≥Å ‡≤π‡≥ä‡≤∞‡≤§‡≥Ü‡≤ó‡≥Ü‡≤Ø‡≤≤‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü',
            'parsed': '‡≤µ‡≤ø‡≤∂‡≥ç‡≤≤‡≥á‡≤∑‡≤ø‡≤§ ‡≤Æ‡≥å‡≤≤‡≥ç‡≤Ø‡≤ó‡≤≥‡≥Å',
            'recommended': '‡≤∂‡≤ø‡≤´‡≤æ‡≤∞‡≤∏‡≥Å ‡≤Æ‡≤æ‡≤°‡≤ø‡≤¶ ‡≤¨‡≥Ü‡≤≥‡≥Ü‡≤ó‡≤≥‡≥Å ‡≤Æ‡≤§‡≥ç‡≤§‡≥Å ‡≤Æ‡≤æ‡≤∞‡≥Å‡≤ï‡≤ü‡≥ç‡≤ü‡≥Ü ‡≤¨‡≥Ü‡≤≤‡≥Ü‡≤ó‡≤≥‡≥Å',
            'warnings': '‡≤é‡≤ö‡≥ç‡≤ö‡≤∞‡≤ø‡≤ï‡≥Ü‡≤ó‡≤≥‡≥Å',
            'saved': '‡≤â‡≤≥‡≤ø‡≤∏‡≤ø‡≤¶ ‡≤µ‡≤∞‡≤¶‡≤ø‡≤ó‡≤≥‡≤®‡≥ç‡≤®‡≥Å ‡≤µ‡≥Ä‡≤ï‡≥ç‡≤∑‡≤ø‡≤∏‡≤ø',
            'nitrogen': '‡≤®‡≥à‡≤ü‡≥ç‡≤∞‡≥ã‡≤ú‡≤®‡≥ç',
            'phosphorus': '‡≤´‡≤æ‡≤∏‡≥ç‡≤´‡≤∞‡≤∏‡≥ç',
            'potash': '‡≤™‡≥ä‡≤ü‡≤æ‡≤∂‡≥ç',
            'ph': '‡≤™‡≤ø‡≤π‡≥Ü‡≤ö‡≥ç',
            'moisture': '‡≤Ü‡≤¶‡≥ç‡≤∞‡≤§‡≥Ü'
        },
        'hi': {
            'extracted': '‡§®‡§ø‡§ï‡§æ‡§≤‡§æ ‡§ó‡§Ø‡§æ ‡§™‡§æ‡§†',
            'parsed': '‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ø‡§§ ‡§Æ‡§æ‡§®',
            'recommended': '‡§Ö‡§®‡•Å‡§∂‡§Ç‡§∏‡§ø‡§§ ‡§´‡§∏‡§≤‡•á‡§Ç ‡§î‡§∞ ‡§¨‡§æ‡§ú‡§º‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø',
            'warnings': '‡§ö‡•á‡§§‡§æ‡§µ‡§®‡•Ä',
            'saved': '‡§∏‡§π‡•á‡§ú‡•Ä ‡§ó‡§à ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§¶‡•á‡§ñ‡•á‡§Ç',
            'nitrogen': '‡§®‡§æ‡§á‡§ü‡•ç‡§∞‡•ã‡§ú‡§®',
            'phosphorus': '‡§´‡•â‡§∏‡•ç‡§´‡•ã‡§∞‡§∏',
            'potash': '‡§™‡•ã‡§ü‡§æ‡§∂',
            'ph': '‡§™‡•Ä‡§è‡§ö',
            'moisture': '‡§®‡§Æ‡•Ä'
        }
    }

    crop_translations = {
        'Rice': {'en': 'Rice', 'kn': '‡≤Ö‡≤ï‡≥ç‡≤ï‡≤ø', 'hi': '‡§ö‡§æ‡§µ‡§≤'},
        'Wheat': {'en': 'Wheat', 'kn': '‡≤ó‡≥ã‡≤ß‡≤ø', 'hi': '‡§ó‡•á‡§π‡•Ç‡§Ç'},
        'Maize': {'en': 'Maize', 'kn': '‡≤ú‡≥ã‡≤≥', 'hi': '‡§Æ‡§ï‡•ç‡§ï‡§æ'},
        'Finger Millet': {'en': 'Finger Millet', 'kn': '‡≤∞‡≤æ‡≤ó‡≤ø', 'hi': '‡§Æ‡§Ç‡§°‡•Å‡§Ü'},
        'Soybean': {'en': 'Soybean', 'kn': '‡≤∏‡≥ã‡≤Ø‡≤æ‡≤¨‡≥Ä‡≤®‡≥ç', 'hi': '‡§∏‡•ã‡§Ø‡§æ‡§¨‡•Ä‡§®'},
        'Groundnut': {'en': 'Groundnut', 'kn': '‡≤ï‡≤°‡≤≤‡≥Ü‡≤ï‡≤æ‡≤Ø‡≤ø', 'hi': '‡§Æ‡•Ç‡§Ç‡§ó‡§´‡§≤‡•Ä'},
        'Sugarcane': {'en': 'Sugarcane', 'kn': '‡≤ï‡≤¨‡≥ç‡≤¨‡≥Å', 'hi': '‡§ó‡§®‡•ç‡§®‡§æ'},
        'Sorghum': {'en': 'Sorghum', 'kn': '‡≤ú‡≥ã‡≤≥', 'hi': '‡§ú‡•ç‡§µ‡§æ‡§∞'},
        'Banana': {'en': 'Banana', 'kn': '‡≤¨‡≤æ‡≤≥‡≥Ü‡≤π‡≤£‡≥ç‡≤£‡≥Å', 'hi': '‡§ï‡•á‡§≤‡§æ'},
        'Chickpea': {'en': 'Chickpea', 'kn': '‡≤ï‡≤°‡≤≤‡≥Ü', 'hi': '‡§ö‡§®‡§æ'},
        'Mustard': {'en': 'Mustard', 'kn': '‡≤∏‡≤æ‡≤∏‡≤ø‡≤µ‡≥Ü', 'hi': '‡§∏‡§∞‡§∏‡•ã‡§Ç'},
        'Barley': {'en': 'Barley', 'kn': '‡≤ú‡≥ã', 'hi': '‡§ú‡•å'},
        'Pea': {'en': 'Pea', 'kn': '‡≤¨‡≤ü‡≤æ‡≤£‡≤ø', 'hi': '‡§Æ‡§ü‡§∞'},
        'Lentil': {'en': 'Lentil', 'kn': '‡≤Æ‡≤∏‡≥Ç‡≤∞', 'hi': '‡§Æ‡§∏‡•Ç‡§∞'},
        'Cotton': {'en': 'Cotton', 'kn': '‡≤π‡≤§‡≥ç‡≤§‡≤ø', 'hi': '‡§ï‡§™‡§æ‡§∏'},
        'Watermelon': {'en': 'Watermelon', 'kn': '‡≤ï‡≤≤‡≤Ç‡≤ó‡≤°‡≤ø', 'hi': '‡§§‡§∞‡§¨‡•Ç‡§ú'},
        'Muskmelon': {'en': 'Muskmelon', 'kn': '‡≤∏‡≥å‡≤§‡≥Ü‡≤ï‡≤æ‡≤Ø‡≤ø', 'hi': '‡§ñ‡§∞‡§¨‡•Ç‡§ú‡§æ'},
        'Cucumber': {'en': 'Cucumber', 'kn': '‡≤∏‡≥å‡≤§‡≥Ü‡≤ï‡≤æ‡≤Ø‡≤ø', 'hi': '‡§ñ‡•Ä‡§∞‡§æ'},
        'Green Gram': {'en': 'Green Gram', 'kn': '‡≤π‡≥Ü‡≤∏‡≤∞‡≥Å‡≤ï‡≤æ‡≤≥‡≥Å', 'hi': '‡§Æ‡•Ç‡§Ç‡§ó'}
    }

    t = translations.get(language, translations['en'])

    try:
        nitrogen, phosphorus, potash, ph_value, moisture = extract_values(text)
        save_to_db(farmer_name, location, crop_type, nitrogen, phosphorus, potash, ph_value, moisture)

        recommended_crops, warnings = recommend_crops(
            nitrogen, phosphorus, potash, ph_value, moisture, crop_type, sowing_month
        )

        translated_crops = [(crop_translations[crop][language], get_crop_price(crop)) for crop in recommended_crops]

        return f"""
        <button onclick="window.print()">üñ®Ô∏è</button>
        <h2>{t['extracted']}:</h2><pre>{text}</pre>
        <h2>{t['parsed']}:</h2>
        <ul>
          <li>{t['nitrogen']}: {nitrogen}</li>
          <li>{t['phosphorus']}: {phosphorus}</li>
          <li>{t['potash']}: {potash}</li>
          <li>{t['ph']}: {ph_value}</li>
          <li>{t['moisture']}: {moisture}</li>
        </ul>
        <h2>üå± {t['recommended']}:</h2>
        <ul>
          {''.join(f'<li>{name}: ‚Çπ{price}</li>' for name, price in translated_crops)}
        </ul>
        <h2>‚ö†Ô∏è {t['warnings']}:</h2>
        <ul>
          {''.join(f'<li>{note}</li>' for note in warnings)}
        </ul>
        <p><a href='/reports'>{t['saved']}</a></p>
        <style>@media print {{ button, a {{ display: none; }} }}</style>
        """
    except Exception:
        numbers = extract_all_numbers(text)
        return f"<h2>Detected Numbers:</h2><p>{numbers}</p><p>‚ö†Ô∏è Unable to auto-map values. Please verify manually.</p>"

@app.route('/reports')
def view_reports():
    conn = sqlite3.connect('soil_reports.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM soil_reports ORDER BY id DESC')
    rows = cursor.fetchall()
    conn.close()

    html = "<h1>Saved Reports</h1><table border='1'><tr><th>ID</th><th>Farmer</th><th>Location</th><th>Crop</th><th>N</th><th>P</th><th>K</th><th>pH</th><th>Moisture</th><th>Interpretation</th></tr>"
    for row in rows:
        html += f"<tr>{''.join(f'<td>{cell}</td>' for cell in row)}</tr>"
    html += "</table><p><a href='/'>Upload another report</a></p><p><a href='/export_csv'>üì§ Export as CSV</a></p>"
    return html

@app.route('/export_csv')
def export_csv():
    conn = sqlite3.connect('soil_reports.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM soil_reports')
    rows = cursor.fetchall()
    conn.close()

    def generate():
        yield 'ID,Farmer,Location,Crop,N,P,K,pH,Moisture,Interpretation\n'
        for row in rows:
            yield ','.join(str(cell) for cell in row) + '\n'

    return Response(generate(), mimetype='text/csv',
                    headers={"Content-Disposition": "attachment;filename=soil_reports.csv"})
 #Launch the Flask app
if __name__ == '__main__':
    app.run(debug=True)